#include "GPS.h"

// 输入参数文件名
void GPS_init(H5::H5File& file)
{
    // 创建 'GPS' 分组
    H5::Group GPSGroup = file.createGroup(GPS_GROUP_NAME);
    // 需要存储的GPS个数
    for (int GPSIndex = 0; GPSIndex < GPS_group; GPSIndex++) {
        // 创建数据集
        std::string subDataSet = "GPSData_" + std::to_string(GPSIndex);
        hsize_t dims[2] = {timeStamp,GPS_Entry}; 
        H5::DataSpace dataspace(2, dims);
        H5::DataType datatype = H5::PredType::NATIVE_DOUBLE; 
        H5::DataSet GPSDataset = GPSGroup.createDataSet(subDataSet, datatype, dataspace);
        // 创建属性数据空间
        H5::DataSpace attrSpace(H5S_SCALAR);
        H5::DataType attr_datatype = H5::StrType(H5::PredType::C_S1, H5T_VARIABLE); 
        H5::Attribute attribute = GPSDataset.createAttribute("ID", attr_datatype, attrSpace);
        std::string ID = GPSID;
        attribute.write(attr_datatype, ID);
    }
    GPS_Set(GPS_BaudRate,GPS_Rates);
}

void GPS_collection(void)
{ 
    // 打开串口
    boost::asio::io_service io;
    boost::asio::serial_port port(io);
    port.open(GPS_Port);  
    port.set_option(boost::asio::serial_port_base::baud_rate(GPS_BaudRate)); 
    boost::asio::streambuf buffer;
    std::string line;
    while(true)
    {
          while (!thread6Ready.load(std::memory_order::memory_order_acquire)) {
                // 等待 thread6Ready 为 true
                std::this_thread::sleep_for(std::chrono::milliseconds(1));
                }
          // 读取串口数据
          boost::asio::read_until(port, buffer, '\n');
          std::istream is(&buffer);
          std::getline(is, line);
          if (line.compare(0, 6, "$GNGGA") == 0)
             {
             // 解析 NMEA 语句的逻辑
             std::istringstream ss(line);
             std::string token;
             // 分割字符串
             std::vector<std::string> tokens;
             while (std::getline(ss, token, ',')) 
                   {
                   tokens.push_back(token);
                   }
             // 解析字段
             if(tokens[2]!="" && tokens[4]!="" && tokens[3]=="N" && tokens[5]=="E")
                {
                GPS_Data[0] = std::stod(tokens[2]);
                GPS_Data[1] = std::stod(tokens[4]);
                }
             else if(tokens[2]!="" && tokens[4]!="" && tokens[3]=="S" && tokens[5]=="W")
                {
                GPS_Data[0] = -std::stod(tokens[2]);
                GPS_Data[1] = -std::stod(tokens[4]);
                }
             }
             GPS_Data_writing(0, currentTimestamp);
             thread6Ready.store(false, std::memory_order::memory_order_release);
  }
}   

// 输入子数据集 "GPSData_x"，并使用时间戳作为第一个维度
void GPS_Data_writing(int GPSIndex, hsize_t currentTimeStamp)
{
    //写入数据
    H5::H5File file("Data_"+ std::to_string(Writing_Index)+".h5", H5F_ACC_RDWR);
    H5::Group GPSGroup = file.openGroup(GPS_GROUP_NAME);
    std::string subDataSet = "GPSData_" + std::to_string(GPSIndex);               
    H5::DataSet GPSDataset = GPSGroup.openDataSet(subDataSet);    
    hsize_t start[2] = {currentTimeStamp, 0};
    hsize_t count[2] = {1,GPS_Entry};
    H5::DataSpace memspace(2, count);
    H5::DataSpace dataspace = GPSDataset.getSpace(); 
    H5::DataType datatype = GPSDataset.getDataType(); 
    // 选择数据集的超集以写入数据
    dataspace.selectHyperslab(H5S_SELECT_SET, count, start);
    GPSDataset.write(GPS_Data.data(), datatype, memspace ,dataspace);
}

void GPS_Set(int GPS_BaudRate,float GPS_Rates)
{
     boost::asio::io_service io;
     boost::asio::serial_port port(io, GPS_Port);  // 请替换为你的串口设备路径
     std::vector<uint8_t> data;
     if(GPS_BaudRate == 4800){
     // 待发送的16进制数据
     data = {0xb5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xd0, 0x08, 0x00,
                                     0x00, 0xc0, 0x12, 0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0xd3, 0xfc, 0xb5, 0x62, 0x06, 0x00, 0x01, 0x00, 0x01, 0x08, 0x22};}
     if(GPS_BaudRate == 9600){
     data = {0xb5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xd0, 0x08, 0x00,
                                     0x00, 0x80, 0x25, 0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0xa6, 0xcd, 0xb5, 0x62, 0x06, 0x00, 0x01, 0x00, 0x01, 0x08, 0x22};}
     if(GPS_BaudRate == 19200){
     data = {0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0xD0, 0x08, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x07, 0x00,
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x57};}
     if(GPS_BaudRate == 38400){
     data = {0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0xD0, 0x08, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x07, 0x00,
                                     0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0xA8};}
     if(GPS_BaudRate == 115200){
     data = {0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0xD0, 0x08, 0x00, 0x00, 0x00, 0xC2, 0x01, 0x00, 0x07, 0x00,
                                     0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC4, 0x96, 0xB5, 0x62,
                                     0x06, 0x00, 0x01, 0x00, 0x01, 0x08, 0x22};}
     if(GPS_BaudRate == 57600){
     data = {0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0xD0, 0x08, 0x00, 0x00, 0x00, 0xE1, 0x00, 0x00, 0x07, 0x00,
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDE, 0xC9};}
     // 发送设置波特率命令
     boost::asio::write(port, boost::asio::buffer(data));
     if(GPS_Rates == 1){
     // 待发送的16进制数据
     data = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xE8, 0x03, 0x01, 0x00,
                                     0x01, 0x00, 0x01, 0x39};}
     if(GPS_Rates == 2){
     data = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xF4, 0x01, 0x01, 0x00,
                                     0x01, 0x00, 0x0B, 0x77};}
     if(GPS_Rates == 3){
     data = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x4D, 0x01, 0x01, 0x00,
                                     0x01, 0x00, 0x64, 0x8D};}
     if(GPS_Rates == 4){
     data = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xFA, 0x00, 0x01, 0x00, 0x01, 0x00, 0x10, 0x96,
                                     0xB5, 0x62, 0x06, 0x08, 0x00, 0x00, 0x0E, 0x30};}
     if(GPS_Rates == 5){
     data = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A,
                                     0xB5, 0x62, 0x06, 0x08, 0x00, 0x00, 0x0E, 0x30};}
     if(GPS_Rates == 8){
     data = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x7D, 0x00, 0x01, 0x00, 0x01, 0x00, 0x93, 0xA8,
                                     0xB5, 0x62, 0x06, 0x08, 0x00, 0x00, 0x0E, 0x30};}
     if(GPS_Rates == 10){
     data = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x64, 0x00, 0x01, 0x00, 0x01, 0x00, 0x7A, 0x12,
                                     0xB5, 0x62, 0x06, 0x08, 0x00, 0x00, 0x0E, 0x30};}
     if(GPS_Rates == 0.33){
     data = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xB8, 0x0B, 0x01, 0x00, 0x01, 0x00, 0xD9, 0x41,
                                     0xB5, 0x62, 0x06, 0x08, 0x00, 0x00, 0x0E, 0x30};}
     if(GPS_Rates == 0.2){
     data = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x88, 0x13, 0x01, 0x00, 0x01, 0x00, 0xB1, 0x49,
                                     0xB5, 0x62, 0x06, 0x08, 0x00, 0x00, 0x0E, 0x30};}
     if(GPS_Rates == 0.1){
     data = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x10, 0x27, 0x01, 0x00, 0x01, 0x00, 0x4D, 0xDD,
                                     0xB5, 0x62, 0x06, 0x08, 0x00, 0x00, 0x0E, 0x30};}
     // 发送输出速率 1Hz - 10Hz 命令
     boost::asio::write(port, boost::asio::buffer(data));
     data = {  0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31, 0xBF};
     // 保存设置
     boost::asio::write(port, boost::asio::buffer(data));
}

